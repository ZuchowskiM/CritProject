@*@{
        var result = "";
        Array userData = null;
        char[] delimiterChar = { ',' };
        var dataFile = Server.MapPath("~/App_Data/rev0001.txt");

        if (File.Exists(dataFile))
        {
            userData = File.ReadAllLines(dataFile);
            if (userData == null)
            {
                // Empty file.
                result = "The file is empty.";
            }
        }
        else
        {
            // File does not exist.
            result = "The file does not exist.";
        }
    }*@

@model CritProject.Models.ReviewModels
@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="container">

    <h1 class="text-center">@Html.DisplayFor(model => model.ReviewTitle)</h1>
    <br />

    <div class="row justify-content-center">
        <div class="col-4">
            <img src="@Url.Content(Model.Game.Picture)" width="300px" height="400px"
        </div>
    </div>


    <div class="col-6">
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.Critic)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Critic.Alias)
            </dd>



            <dt>
                @Html.DisplayNameFor(model => model.Game.Title)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Game.Title)
            </dd>

            @*<dt>
                    @Html.DisplayNameFor(model => model.ReviewTitle)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.ReviewTitle)
                </dd>*@

            <dt>
                @Html.DisplayNameFor(model => model.PublishDate)
            </dt>

            <dd>
                @{
                    var str = Model.PublishDate.ToString().Substring(0, 10);
                    <p>@str</p>
                }
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Rating)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Rating)/10
            </dd>

            @*<dt>
                    @Html.DisplayNameFor(model => model.ReviewText)
                </dt>*@

            @*<dd>
                    @Html.DisplayFor(model => model.ReviewText).ToString()
                </dd>*@

            @*<dd class="center-block">
                    @{
                        //StreamReader sr1 = File.OpenText(Server.MapPath("~/App_Data/" + Model.ReviewText.ToString()));
                        var sr = Model.ReviewText.ToString();
                        //string strContents = sr.ReadToEnd();
                        //To display normal raw contents
                        //Response.Write(strContents);

                        //To handle Carriage returns
                        //Response.Write(strContents.Replace("\n", "<br>"));

                        //sr.Close();

                    }
                    @Html.Raw(sr.Replace("\r\n", "<br />"))
                </dd>*@

        </dl>
    </div>



</div>
<br />
<br />
<div class="container text-center border">
    @{
        //StreamReader sr1 = File.OpenText(Server.MapPath("~/App_Data/" + Model.ReviewText.ToString()));
        var sr1 = Model.ReviewText.ToString();
        //string strContents = sr.ReadToEnd();
        //To display normal raw contents
        //Response.Write(strContents);

        //To handle Carriage returns
        //Response.Write(strContents.Replace("\n", "<br>"));

        //sr.Close();

    }
    @Html.Raw(sr1.Replace("\r\n", "<br />"))
</div>
<br />
<br />


<p>

    @if (User.Identity.IsAuthenticated)
    {
        if (User.IsInRole("critic") && Model.Critic.SecondName == User.Identity.GetUserId())
        {
            <button class="btn btn-info">
                @Html.ActionLink("Edit", "Edit", new { id = Model.ID }, htmlAttributes: new { @class = "card-link", @style = "color: white" })
            </button>
        }
    }

    <button class="btn btn-dark">
        @Html.ActionLink("Back to List", "Index", routeValues: null, htmlAttributes: new { @class = "card-link", @style = "color: white" })
    </button>

</p>
<div>
    <h2>Comment section</h2>
    <table class="table table-bordered text-center">
        <thead>
            <tr class="text-center col-md-7">
                <th class="text-center">
                    Comment
                </th>
                <th class="text-center col-md-2">
                    Author Name
                </th>
                <th class="text-center col-md-3">
                    Date
                </th>
            </tr>
        </thead>

        @foreach (var item in Model.Comments)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Text)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.OwnerName)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.CommentDate)
                </td>
            </tr>
        }
    </table>
</div>

@*<form>
        <div class="form-group">
            <label for="addComment">Add a comment!</label>
            <textarea class="form-control" id="addComment" rows="3"></textarea>




            @Html.ActionLink("Add a comment", "CreateFromReview", "CommentModels")
        </div>
    </form>*@

<form action="~/CommentModels/CreateFromReview" Method="POST" class="form-group">
    <input type="hidden" name="ReviewID" id="ReviewID" value=@Model.ID />
    <input type="hidden" name="OwnerName" id="OwnerName" value="Guest" />
    <div class="row row-no-gutters">
        <div class="col-md-3">
            <input class="form-control" type="text" name="Text" id="Text" value="write a comment" />
        </div>

        <div class="col-md-1">
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </div>


</form>

